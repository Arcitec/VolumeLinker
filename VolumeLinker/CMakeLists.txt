# IMPORTANT: THE VISUAL STUDIO .SLN FILE GENERATED BY CMAKE WILL BE PLACED
# IN THE SOURCE FOLDER, NOT IN THE REPOSITORY ROOT. OPEN THE CORRECT FILE!
# ALSO NOTE: GENERATING .SLN FILES HAS NOT BEEN TESTED. THE PRIMARY PURPOSE
# OF THIS CONFIG FILE IS TO ALLOW BUILDING DIRECTLY FROM CMAKE WITH THE MSVC
# COMMAND LINE BUILD TOOLS. TO BUILD VIA VISUAL STUDIO, USE THE PRE-INCLUDED
# NON-CMAKE BASED VISUAL STUDIO .SLN FILE INSTEAD, JUST TO BE SURE!

cmake_minimum_required(VERSION 3.16.0 FATAL_ERROR)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

##################### Variables ############################
# Change if you want modify paths or other values          #
############################################################

# Project
get_filename_component(PROJECT_DIR "${CMAKE_CURRENT_SOURCE_DIR}" ABSOLUTE)
set(DEPENDENCIES_DIR ${PROJECT_DIR}/dependencies)
set(PROJECT_NAME VolumeLinker)

# Dependencies
set(EXTERNAL_DOWNLOAD_DIR "${CMAKE_CURRENT_SOURCE_DIR}/_external/")
set(THIRDPARTY_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/non-package libraries/")

# Outputs
set(OUTPUT_DEBUG ./build/debug/)
set(OUTPUT_RELEASE ./build/release/)

################## Dependencies ############################
# Downloads and includes all required dependencies         #
############################################################

if(NOT EXISTS "${THIRDPARTY_INCLUDE_DIR}/wil/")
    if(NOT EXISTS "${EXTERNAL_DOWNLOAD_DIR}")
        file(MAKE_DIRECTORY "${EXTERNAL_DOWNLOAD_DIR}")
    endif()

    message("Downloading the Microsoft WIL library.")
    execute_process(COMMAND git clone --depth 1 https://github.com/microsoft/wil.git --
                    WORKING_DIRECTORY "${EXTERNAL_DOWNLOAD_DIR}")
    file(COPY "${EXTERNAL_DOWNLOAD_DIR}/wil/include/wil/"
         DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/non-package libraries/wil/")
endif()

if(EXISTS "${EXTERNAL_DOWNLOAD_DIR}")
    file(REMOVE_RECURSE "${EXTERNAL_DOWNLOAD_DIR}")
endif()

include_directories(
    "${THIRDPARTY_INCLUDE_DIR}"
)


################# CMake Project ############################
# The main options of the project                          #
############################################################

if(${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Windows")
    # Force latest Windows 10 SDK, which is backwards compatible with any OS that
    # still has ongoing support from Microsoft (anything that's not a dead OS).
    set(CMAKE_SYSTEM_VERSION "10.0" CACHE INTERNAL "" FORCE)

    # Statically link (embed) the Visual C++ Runtime for user convenience, thus
    # ensuring that the user doesn't need the runtime DLL. This is safe as long
    # as we never link to any DLLs that were compiled against the runtime DLL,
    # in which case there can be memory errors (static DLL owner vs dynamic).
    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()

project(${PROJECT_NAME} CXX)

# Define Release by default.
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release")
    message(STATUS "Build type not specified: Use Release by default.")
endif()

############## Artefacts Output ############################
# Defines outputs (depending on BUILD TYPE)                #
############################################################

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    # For Visual Studio
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_DIR}/${OUTPUT_DEBUG}")
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_DIR}/${OUTPUT_DEBUG}")
    set(CMAKE_EXECUTABLE_OUTPUT_DIRECTORY "${PROJECT_DIR}/${OUTPUT_DEBUG}")
    # For CMake direct builds (such as via VSCode)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_DIR}/${OUTPUT_DEBUG}")
else()
    # For Visual Studio
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_DIR}/${OUTPUT_RELEASE}")
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_DIR}/${OUTPUT_RELEASE}")
    set(CMAKE_EXECUTABLE_OUTPUT_DIRECTORY "${PROJECT_DIR}/${OUTPUT_RELEASE}")
    # For CMake direct builds (such as via VSCode)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_DIR}/${OUTPUT_RELEASE}")
endif()

# Messages
message("${PROJECT_NAME}: MAIN PROJECT: ${CMAKE_PROJECT_NAME}")
message("${PROJECT_NAME}: CURR PROJECT: ${CMAKE_CURRENT_SOURCE_DIR}")
message("${PROJECT_NAME}: CURR BIN DIR: ${CMAKE_CURRENT_BINARY_DIR}")

############### Files & Targets ############################
# Files of project and target to build                     #
############################################################

# Source Files
set(SRC_FILES
    ./AudioDevice.cpp
    ./AudioDeviceManager.cpp
    ./main.cpp
)
source_group("Sources" FILES ${SRC_FILES})

# Header Files
set(HEADERS_FILES
    AudioDevice.h
    AudioDeviceManager.h
    AudioEndpointVolumeCallback.h
    helpers.h
    resource.h
    framework.h
    targetver.h
)
source_group("Headers" FILES ${HEADERS_FILES})

# Resource Files
set(RESOURCE_FILES
    VolumeLinker.rc
    VolumeLinker_Main.ico
    VolumeLinker_Disabled.ico
    DPIAware.manifest
)
source_group("Resource Files" FILES ${RESOURCE_FILES})

# Add executable to build.
add_executable(${PROJECT_NAME} WIN32
   ${SRC_FILES} ${HEADERS_FILES} ${RESOURCE_FILES}
)

######################### Flags ############################
# Defines Compiler and Linker flags                        #
############################################################

if(NOT MSVC)
   # NON-MSVC IS NOT OFFICIALLY SUPPORTED BY OUR PROJECT AND WILL PROBABLY FAIL!
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
   if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
       set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
   endif()
endif()

# Preprocessor definitions
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    target_compile_definitions(${PROJECT_NAME} PRIVATE 
        -D_DEBUG 
        -D_WINDOWS 
    )
    if(MSVC)
        target_compile_options(${PROJECT_NAME} PRIVATE  /W3 /Od /Zi /EHsc /std:c++latest)
    endif()
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Release")
    target_compile_definitions(${PROJECT_NAME} PRIVATE 
        -DNDEBUG 
        -D_WINDOWS 
    )
    if(MSVC)
        target_compile_options(${PROJECT_NAME} PRIVATE  /W3 /GL /O2 /Zi /EHsc /std:c++latest)
        set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS "/LTCG") # Necessary because we compiled with /GL.
    endif()
endif()

add_definitions(-DUNICODE -D_UNICODE) # Build as Windows unicode application.

set_property(TARGET ${PROJECT_NAME} PROPERTY VS_DPI_AWARE "OFF") # Is handled by DPIAware.manifest instead.
